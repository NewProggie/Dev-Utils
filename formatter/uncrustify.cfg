# Uncrustify Configuration v0.61
# Kai Wolf, 2015

## General options
utf8_bom                             = remove # utf-8 byte order mark
code_width                           = 80     # limit code to N number of cols
newlines                             = auto   # type of newline endings: { Auto, LF, CR, CRLF }

## Indenting
indent_with_tabs                     = 0      # 0=spaces only, 1=with tabs, 2=indent/align with tabs
indent_columns                       = 4      # number of columns to indent per level
indent_align_string                  = true   # whether to indent strings broken by '\'
indent_namespace                     = true   # whether to indent namespace body
indent_class                         = true   # wheher the class body is indented
indent_relative_single_line_comments = true   # indent trailing single line "//" relative to code
indent_col1_comment                  = true   # whether to indent comments found in first col
indent_access_spec_body              = true
indent_align_assign                  = true
indent_namespace_level               = 4      # number of spaces to indent a namespace block
indent_member                        = 1      # num spaces to indent a continued "->" or "."
indent_sing_line_comments            = 0      # num spaces to indent single-line comments "//"
indent_case_shift                    = 2      # num spaces to indent "case" line
indent_case_brace                    = 0      # num spaces to indent "{" from "case"
indent_label                         = 1      # num spaces to indent goto labels
indent_access_spec                   = 1      # num spaces to indent "public:" etc. followed by ","
indent_paren_close                   = 0      # 0=indent body level,1=align parent, 2=brace level

## Spacing options { ignore, add, remove, force }
sp_balance_nested_parens             = true
sp_arith                             = add    # spaces around "+", "-", "/", "*", etc.
sp_assign                            = add    # spaces around "=", "+=", etc.
sp_assign_default                    = add    # spaces around "=" in a prototype
sp_enum_assign                       = add    # spaces around "=" in enum
sp_pp_concat                         = add    # spaces around preprocessor "##" concat operator
sp_pp_stringify                      = add    # spaces around preprocessor "#" stringify operator
sp_bool                              = add    # spaces around "&&" and "||"
sp_compare                           = add    # spaces around "<", ">", "==", etc.
sp_inside_paren                      = remove # spaces inside "(" and ")"
sp_paren_paren                       = remove # space between "((" vs. ") )"
sp_paren_brace                       = remove # spaces between ")" and "{"
sp_before_ptr_star                   = remove # space before pointer star "*"
sp_between_ptr_star                  = add    # space between pointer star "*"
sp_after_ptr_star                    = add    # space after pointer star "*", if followed by a word
sp_before_byref                      = remove # space before a reference "&"
sp_before_unnamed_byref              = add    # space before "&" not followed by a variable name
sp_after_byref                       = add    # space after "&", if followed by a word
sp_after_byref_func                  = add    # space after "&", if followed by a func proto def.
sp_before_byref_func                 = add    # space before "&", if followed by a func proto def.
sp_after_type                        = force  # space between type and word
sp_template_angle                    = remove # "template <" vs "template<"
sp_before_angle                      = remove # space before "<>"
sp_inside_angle                      = remove # space between "<" and ">"
sp_after_angle                       = add    # space after "<>"
sp_angle_paren                       = remove # space after "<>" and "(", e.g. "new List<byte>()"
sp_angle_word                        = add    # space between "<>" and a word, e.g. "List<byte> m"
sp_angle_shift                       = ignore # ">>" vs "> >" (c++ templates)
sp_before_sparen                     = add    # "if (" vs "if("
sp_inside_sparen                     = remove # space between if-condition "(" and ")"
sp_after_sparen		                 = force  # "if () {" vs "if (){"
sp_before_semi                       = remove # space before ";"
sp_after_semi                        = add    # space after ";", expect when followed by a comment
sp_after_semi_for                    = force  # space after ";" in non-empty for loops
sp_before_squares                    = remove # space before "[]"
sp_after_comma                       = add    # space after ","
sp_before_comma                      = remove # space before ","
sp_after_operator                    = remove # space between operator and operator sign
sp_after_cast                        = add    # "(int) a" vs "(int)a"
sp_inside_paren_cast                 = remove # "int( exp )" vs "int(exp)"
sp_cpp_cast_paren                    = remove # "int(exp)" vs "int (exp)"
sp_sizeof_paren                      = remove # "sizeof (int)" vs "sizeof(int)"
sp_inside_braces                     = add    # "{ 1 }" vs "{1}"
sp_inside_braces_struct              = add    # "{ 1 }" vs "{1}"
sp_inside_braces_enum                = add    # "{ 1 }" vs "{1}"
sp_inside_braces_empty               = add    # spaces inside "{}"
sp_func_proto_paren                  = remove # "int foo ();" vs "int foo();"
sp_func_def_paren                    = remove # "int foo (){" vs "int foo(){"
sp_inside_fparens                    = remove # spaces inside empty function "()"
sp_inside_fparen                     = remove # spaces inside function "()"
sp_square_fparen                     = remove # spaces between "]" and "(" when part of a function
sp_fparen_brace                      = add    # spaces between ")" and "{" of a function
sp_func_call_paren                   = remove # "foo (" vs "foo("
sp_func_class_paren                  = remove # space between ctor/dtor and the open paren
sp_return_paren                      = add    # "return (1);" vs "return(1);"
sp_else_brace                        = add    # "else{" vs "else {"
sp_brace_else                        = add    # "}else" vs "} else"
sp_after_dc                          = remove # "foo::bar" vs "foo:: bar"
sp_not                               = remove # "!foo" vs "! foo"
sp_inv                               = remove # "~foo" vs "~ foo"
sp_addr                              = remove # "&foo" vs "& foo"
sp_member                            = remove # "foo->bar" vs "foo -> bar"
sp_deref                             = remove # "*foo" vs "* foo"
sp_sign                              = remove # "x = -5" vs "x = - 5"
sp_incdec                            = remove # "x--" vs "x --"
sp_before_nl_cont                    = add    # space before backslash-newline at end of line
sp_cond_colon                        = add    # "b ? t : f" vs "b ? t:f"
sp_cond_question                     = add    # "b ? t : f" vs b?t : f
sp_cmt_cpp_start                     = add    # "// A foobar" vs "//A foobar"
sp_after_new                         = add    # space after "new", "delete" and "delete[]"

## Code Alignment
align_keep_tabs                      = false  # whether to keep non-indenting tabs
align_with_tabs                      = false  # whether to use tabs for aligning
align_on_tabstop                     = false  # whether to bump out to the next tab when aligning
align_number_left                    = false  # whether to left-align numbers
align_func_params                    = true   # align variable definitions in functions/prototypes
align_same_func_call_params          = true   # align params in single-line functions with same name
align_var_def_colon                  = true   # whether to align the colon in struct bit fields
align_var_def_attribute              = true   # whether to align any attribute after the var name
align_var_def_inline                 = true   # whether to align inline struct/enum/union var defs
align_right_cmt_mix                  = true   # whether align comments with less than 3 spaces
align_on_operator                    = false  # whether to align protos on "operator"
align_single_line_func               = true   # whether to align single-fline functions
align_single_line_brace              = true   # whether to align brace of single-line functions
align_nl_cont                        = true   # whether to align macros wrapped with \ and newline
align_left_shift                     = true   # whether to align "<<" with previous "<<"
align_assign_span                    = 4      # span for aligning on "=" in assignments
align_assign_thresh                  = 4      # threshold for aligning on "=" in assignments
align_enum_equ_span                  = 4      # span for aligning on "=" in enums
align_enum_equ_thresh                = 4      # threshold for alining on "=" in enums
align_var_struct_span                = 4      # span for aligning on "=" in struct/unions
align_var_struct_thresh              = 4      # threshold for aligning on "=" in struct/unions

## Newline adding and removing options
nl_collapse_empty_body               = true   # whether to collapse empty blocks between "{" and "}"
nl_assign_leave_one_liners           = true   # don't split one-liner such as "foo_f f = { 1, 2 };"
nl_class_leave_one_liners            = true   # don't split one-liner inside a class xx {} body
nl_enum_leave_one_liners             = true   # don't split one-liner enums: "enum foo { BAR = 15};"
nl_getset_leave_one_liners           = true   # don't split one-line getter/setter functions
nl_func_leave_one_liners             = false  # don't split "int foo() { return 0; }"
nl_if_leave_one_liners               = true   # don't split one-line if/else "if(a) b++"
nl_multi_line_define                 = false  # force newline in a define after macro name
nl_before_case                       = false  # add newline before "case" statement
nl_after_case                        = false  # add newline after "case" statement
nl_after_return                      = true   # add newline after "return", unless followed by "}"
nl_after_semicolon                   = false  # add newline after ";", except in "for" statements
nl_after_brace_open                  = false  # add newline after "{"
nl_after_brace_close                 = false  # add newline after "}", not done if followed by ";"
nl_after_vbrace_close                = false  # "if (f) a++; return;" vs "if (f) a++; \n return;"
nl_define_macro                      = false  # add newline in "#define" macros
nl_create_if_one_liner               = false  # "if(b)\n i++;" vs "if(b) i++;"
nl_create_for_one_liner              = false  # "for(i=0;i<5;i++)\n f(i);" vs "for(i=0;i<5;i++) f(i);"
nl_create_while_one_liner            = false  # "while (i<5)\n f(i++);" vs "while (i<5) f(i++);"
nl_end_of_file_min                   = 1      # num newlines at the end of the file
nl_max                               = 2      # max num of consecutive newlines
nl_after_func_proto                  = 2
nl_after_func_proto_group            = 2
nl_after_func_body                   = 2      # num newlines after "}" of a multi-line function
nl_after_func_body_class             = 2      # num newlines after "}" of a multi-line function
nl_after_func_body_one_liner         = 2      # num newlines after "}" of a single-line function
nl_before_block_comment              = 2      # num newlines before a multi-line comment
nl_before_c_comment                  = 2      # num newlines before a c comment
nl_before_cpp_comment                = 2      # num newlines before a cpp comment
nl_after_struct                      = 2      # num newlines after "}" or ";" of struct/union/enum
nl_after_class                       = 2      # num newlines after "}" or ";" of class definition
nl_before_access_spec                = 1      # num newlines before "private:", "public:" etc.
nl_after_access_spec                 = 1      # num newlines after "private:", "public:" etc.
nl_end_of_file                       = add    # newline at the end of the file
nl_fcall_brace                       = remove # "foo() {" vs "foo()\n{"
nl_enum_brace                        = remove # "enum {" vs "enum \n {"
nl_if_brace                          = remove # "if () {" vs "if () \n {"
nl_brace_else                        = remove # "} else" vs "} \n else"
nl_else_if                           = remove # newline between "else" and "if"
nl_brace_finally                     = remove # newline between "}" and "finally"
nl_finally_brace                     = remove # newline between "finally" and "{"
nl_try_brace                         = remove # newline between "try" and "{"
nl_catch_brace                       = remove # newline between "catch" and "{"
nl_brace_catch                       = remove # newline between "}" and "catch"
nl_while_brace                       = remove # "while () {" vs "while () \n {"

## Line splitting options
ls_for_split_full                    = true   # whether to fully split long "for" at semi-colons
ls_func_split_full                   = true   # whether to fully split long functions at commas

## Blank line options
nl_after_multiline_comment           = false  # whether to force newline after multi-line comment
eat_blanks_after_open_brace          = true   # whether to remove blank lines after "{"
eat_blanks_before_close_brace        = true   # whether to remove blank lines before "}"

## Code modifying options (non-whitespace)
mod_full_brace_if_chain              = true   # whether all if/else if/else are braced or not
mod_pawn_semicolon                   = false  # whether to change optional semicolons to real ones
mod_full_paren_if_bool               = false  # add parens on "while" and "if" around bools
mod_remove_extra_semicolon           = false  # whether to remove superfluous semi-colons
mod_sort_import                      = false  # sort consecutive single-line "import" statements
mod_sort_using                       = false  # sort consecutive single-line "using" statements
mod_sort_include                     = false  # sprt consecutive single-line "#include" statements
mod_move_case_break                  = false  # move "break" after braced "case" before close brace
mod_remove_empty_return              = false  # remove a void "return;" at the end of a function
mod_full_brace_do                    = add    # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_for                   = add    # "for () a--;" vs "for () { a--; }"
mod_full_brace_function              = add    # add/remove braces on single-line func defs
mod_full_brace_if                    = add    # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_while                 = add    # "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_using                 = add    # add/remove braces on single-line "using ()"

## Comment options
cmt_indent_multi                     = true   # enable multi-line comment changes
cmt_c_group                          = true   # whether to group c-comments which look like block
cmt_c_nl_start                       = false  # whether to put "/*" on the first comment line
cmt_c_nl_end                         = false  # whether to put "*/" on the last comment line
cmt_cpp_group                        = false  # whether to group cpp-comments which look like block
cmt_cpp_nl_start                     = false  # whether to put "/*" on the first comment line
cmt_cpp_nl_end                       = false  # whether to put "*/" on the last comment line
cmt_cpp_to_c                         = false  # whether to change cpp-comments into c-comments
cmt_star_cont                        = true   # whether to put a star on subsequent comment-lines
cmt_multi_check_last                 = true
cmt_insert_before_preproc            = false
cmt_width                            = 80     # try to wrap comments at N columns
cmt_reflow_mode                      = 2      # 0=no reflowing, 1=no touching at all, 2=full reflow
cmt_sp_before_star_cont              = 1      # number of spaces to insert at start of subsequent

## Preprocessor options
pp_indent_at_level                   = true   # whether to indent #if/#endif at brace level or col 1
pp_region_indent_code                = false  # whether to indent code between #region/#endregion
pp_if_indent_code                    = true   # whether to indent between #if, #else and #endif
pp_define_at_level                   = false  # whether to indent #define at brace level or col 1
pp_indent_count                      = 2      # num cols to indent preprocessor statements
pp_indent                            = add    # control indent at preprocessor inside #if blocks
pp_space                             = remove # add/remove space after # in #if blocks
